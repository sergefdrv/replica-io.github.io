"use strict";(self.webpackChunkreplica_io=self.webpackChunkreplica_io||[]).push([[459],{168:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=o(4848),n=o(8453),s=o(7293);const r={title:"On Frameworks for Implementing Distributed Protocols",description:"A post concluding exploration of 7 frameworks for implementing distributed protocols.",authors:"sergefdrv",tags:["technical","overview","long"],image:"./image.png"},a=void 0,l={permalink:"/blog/2024/08/27/on-frameworks-for-implementing-distributed-protocols",editUrl:"https://github.com/replica-io/replica-io.github.io/edit/main/blog/2024-08-27-on-frameworks-for-implementing-distributed-protocols/index.mdx",source:"@site/blog/2024-08-27-on-frameworks-for-implementing-distributed-protocols/index.mdx",title:"On Frameworks for Implementing Distributed Protocols",description:"A post concluding exploration of 7 frameworks for implementing distributed protocols.",date:"2024-08-27T00:00:00.000Z",tags:[{inline:!0,label:"technical",permalink:"/blog/tags/technical"},{inline:!0,label:"overview",permalink:"/blog/tags/overview"},{inline:!0,label:"long",permalink:"/blog/tags/long"}],readingTime:22.34,hasTruncateMarker:!0,authors:[{name:"Sergey Fedorov",title:"Founder",email:"sergefdrv@replica-io.dev",url:"https://github.com/sergefdrv",socials:{x:"https://x.com/sergefdrv",linkedin:"https://www.linkedin.com/in/sergefdrv/",github:"https://github.com/sergefdrv"},imageURL:"https://github.com/sergefdrv.png",key:"sergefdrv",page:null}],frontMatter:{title:"On Frameworks for Implementing Distributed Protocols",description:"A post concluding exploration of 7 frameworks for implementing distributed protocols.",authors:"sergefdrv",tags:["technical","overview","long"],image:"./image.png"},unlisted:!1,lastUpdatedAt:1725886518e3,lastUpdatedBy:"Sergey Fedorov",nextItem:{title:"On Implementation of Distributed Protocols",permalink:"/blog/2024/03/04/on-implementation-of-distributed-prtocols"}},c={image:o(3767).A,authorsImageUrls:[void 0]},d=[{value:"Exploring Distributed Protocol Frameworks",id:"exploring-distributed-protocol-frameworks",level:2},{value:"Model",id:"model",level:2},{value:"Structure",id:"structure",level:2},{value:"Notation",id:"notation",level:2},{value:"Operation",id:"operation",level:2},{value:"Verification",id:"verification",level:2},{value:"Conclusions",id:"conclusions",level:2},{value:"Next Steps",id:"next-steps",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",section:"section",sup:"sup",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["This post concludes the second phase of the ",(0,i.jsx)(t.a,{href:"https://github.com/replica-io/replica-io/issues/7",children:"state-of-the-art exploration"})," in the scope of milestone ",(0,i.jsx)(t.a,{href:"https://github.com/replica-io/replica-io/milestone/1",children:"M0.1"})," of the Replica_IO project, namely exploration of existing frameworks for implementing distributed protocols. It shares the main conclusions drawn from exploring 7 different frameworks."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["A companion video is available ",(0,i.jsx)(t.a,{href:"https://youtu.be/oRQG6EBzVe4",children:"here"}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"exploring-distributed-protocol-frameworks",children:"Exploring Distributed Protocol Frameworks"}),"\n",(0,i.jsxs)(t.p,{children:["Trying to make a real breakthrough, such as what the Replica_IO project aims at, it is important to learn from prior attempts to deal with the problem. Having explored how real-world code bases typically implement the core distributed protocols like consensus and having summarized the findings in ",(0,i.jsx)(t.a,{href:"https://replica-io.dev/blog/2024/03/04/on-implementation-of-distributed-prtocols",children:"the previous post"}),", I continued the exploration by surveying existing attempts to find a better approach to the problem, i.e. different frameworks for implementing distributed protocols."]}),"\n",(0,i.jsx)(t.p,{children:"I looked at the documentation and examples provided by each of the frameworks, as well as into their implementation, in order to figure out how they model and structure distributed systems, what kind of notation is used to specify and implement distributed protocols in those frameworks, what is their approach to communication, concurrency, and composition of protocol components, and what they offer for ensuring the correctness of protocols and their implementations."}),"\n",(0,i.jsxs)(t.p,{children:["After having explored each of the frameworks, I summarized and shared some of my findings. You can find those overviews on ",(0,i.jsx)(t.a,{href:"https://github.com/replica-io/replica-io/wiki/State-of-the-art-exploration",children:"this wiki page"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Here is the full list of 7 frameworks, based on different programming languages, that I explored",(0,i.jsx)(t.sup,{children:(0,i.jsx)(t.a,{href:"#user-content-fn-other-frameworks-ef0b52",id:"user-content-fnref-other-frameworks-ef0b52","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/consensus-shipyard/mir",children:"Mir"})," \u2014 a framework for implementing, debugging, and analyzing distributed protocols (based on Go);"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/SecureSolutionsLab/Atlas",children:"Atlas"})," \u2014 a modular framework for building distributed mechanisms focused on configurability and performance (based on Rust);"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/pfouto/babel-core",children:"Babel"})," \u2014 a generic framework for implementing and executing distributed protocols (based on Java);"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://distal.github.io/",children:"DiStaL"})," \u2014 a framework for implementing and executing distributed protocols (based on Scala);"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/dzufferey/psync",children:"PSync"})," \u2014 a framework for implementing and verifying fault-tolerant distributed protocols (based on Scala);"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/DistributedComponents/disel",children:"Disel"})," \u2014 a framework for implementation and compositional machine-assisted verification of distributed systems and their clients (based on Coq);"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/uwplse/verdi",children:"Verdi"})," \u2014 a framework for implementing and formally verifying distributed systems (based on Coq)."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"In the subsequent sections, I will share some of the observations and conclusions I made while exploring those frameworks. I decided to structure the discussion around the following aspects:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"model"}),": how distributed systems and their components are modeled;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"structure"}),": how distributed protocol components are structured and composed together;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"notation"}),": what kind of notation is used to specify and implement distributed protocols;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"operation"}),": how distributed protocol components are executed and interact with each other;"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"verification"}),": how distributed protocols and their implementations are verified for correctness."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"But before we go into details, I would like to note that most of those frameworks were purely academic efforts and almost all of them seem to be abandoned now; unfortunately, they didn't seem to have found practical use. Nevertheless, it was good to learn from them. Let's now dive in."}),"\n",(0,i.jsx)(t.h2,{id:"model",children:"Model"}),"\n",(0,i.jsx)(t.p,{children:"The way that systems and their components are modeled has a profound effect on the structure and shape of their specifications and implementation, on the operational aspects and verification for correctness. We can consider different levels of abstraction when modeling distributed systems: the high-level model of the system as a whole, the model of individual nodes within the system, as well as individual protocols and components within the nodes. Let's take a look at how the explored frameworks model distributed systems and their components."}),"\n",(0,i.jsxs)(t.p,{children:["The common approach is to model distributed systems at high level as ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Transition_system",children:"state transition systems"})," where the global system state changes upon external and internal events, such as client requests, messages exchanged within the system, and timeouts. In this model, the global system state includes the states of all individual nodes and their components, as well as the environment state. The environment state usually includes the state of the network the nodes communicate through, in particular the messages in transit. Transitioning from one state to another happens according to a global ",(0,i.jsx)(t.em,{children:"transition function"})," triggered by events. The transition function receives the current state of the system together with the triggering event and returns the new system state."]}),"\n",(0,i.jsxs)(t.p,{children:["The explored frameworks follow the ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Message_passing",children:"message-passing"}),' approach, where the states of individual nodes and protocol components are disjoint, i.e. different parts do not share pieces of state. Interaction between nodes happens through the network by sending and receiving messages. Sending and receiving of messages are modeled as events modifying the global system state by updating the set of messages in transit in the network state and, in case of message receiving, the state of the target component in the destination node. For example, in Disel, the system state includes a "message soup" for each protocol, which models the current state and the history of the network.\xa0In Disel\'s abstract model, messages are\xa0never removed\xa0from the message soup, instead they are marked either as active or consumed.']}),"\n",(0,i.jsxs)(t.p,{children:["Nodes and network failures are modeled as special events, e.g. dropping or duplicating messages in the network, disabling normal event handling in faulty nodes or (partially) resetting their state. Some of the frameworks only consider crash faults, leaving ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Byzantine_fault",children:"Byzantine faults"})," for the future work. The system models in most of the frameworks do not seem to include timing assumption, so they can be considered asynchronous. In contrast, PSync employs the Heard-Of model based on communication-closed rounds, which provides an illusion of simple synchronous communication on top of the partial synchrony of the actual underlying network. In this model, protocol execution proceeds in explicit rounds, alternating communication with protocol state transition based on the set of messages received during the round. Network and node faults in this model are unified, and the network assumptions are specified in terms of the heard-of sets."]}),"\n",(0,i.jsx)(t.p,{children:"Communication between nodes is predominantly modeled as fire-and-forget message delivery, where messages can be reordered or dropped by the network abstraction. Though, in Verdi, protocols are first modeled with an idealistic, reliable network semantics, which can then be translated\xa0into weaker fault models using\xa0verified system transformers. Babel allows modeling protocols in stronger communication models using communication channel abstractions, which represent communication mechanisms with different properties and guarantees."}),"\n",(0,i.jsx)(t.p,{children:"Individual components within nodes are commonly modeled as sequential, event-driven state machines interacting with each other via reliable message passing. The message passing normally follows the one-to-one one-way or request-response patterns; however, some of the frameworks also support one-to-many notifications between components. Some frameworks (e.g., Verdi) explicitly distinguish between the events that are external to the distributed protocol, like client requests, and internal events, like exchanging messages between protocol components and nodes within the distributed system."}),"\n",(0,i.jsx)(t.p,{children:"To overcome the limitations of strict state separation between protocol components in the abstract model, Disel allows coupling protocols via inter-protocol behavioral dependencies, called send-hooks, which allow restricted logical access to other protocol's state. Disel doesn't seem to strictly follow the message-passing model for protocol components within the same node, supporting generic composition of protocol components. Disel also provides mechanisms to establish stronger properties of protocols and their combinations by strengthening them with additional inductive invariants."}),"\n",(0,i.jsxs)(t.p,{children:["As we can see, although there are some interesting variations and extensions, the underlying system model in the explored frameworks is largely the same, namely the one of a state transition system composed of components, which are sequential, event-driven state machines with disjoint state, interacting via message passing. This is remarkably similar to how distributed protocols are usually implemented in real-world code bases, which do not use any framework, as I described in ",(0,i.jsx)(t.a,{href:"https://replica-io.dev/blog/2024/03/04/on-implementation-of-distributed-prtocols",children:"the previous post"}),". This approach tends to shift the focus more to the operational rather than functional and logical aspects of the system. There I also pointed out, when discussing how protocol implementations attempt to ",(0,i.jsx)(t.a,{href:"https://replica-io.dev/blog/2024/03/04/on-implementation-of-distributed-prtocols#evading-concurrency",children:"evade concurrency"}),", that this approach may complicate the implementation and cause fragmentation of the protocol logic. Perhaps, adopting the same kind of the underlying model is one of the reasons why the explored frameworks do not seem to have made a real breakthrough in designing and implementing distributed protocols."]}),"\n",(0,i.jsx)(t.h2,{id:"structure",children:"Structure"}),"\n",(0,i.jsx)(t.p,{children:"In all of the explored frameworks, protocol implementations rely on some kind of runtime or shim provided by the framework, hiding low-level concerns from implementation of the protocol logic. In most of the frameworks, the runtime is responsible for coordinating the execution of protocol components and interaction between them; some of the frameworks also provide there dedicated interfaces for communication over the network and setting timers. Protocol components normally need to be registered within the runtime before they can function within the system."}),"\n",(0,i.jsx)(t.p,{children:"In most cases, protocol components within the same node can interact by simply sending some kind of internal messages to each other, without establishing any explicit connection. In contrast, components in Atlas require explicit orchestration of the interaction with the rest of the system. Disel instead supports composition of components expressed as effectful functional programs; it also allows loosely coupling protocol components via inter-protocol behavioral dependencies, called send-hooks, at the formal specification level."}),"\n",(0,i.jsx)(t.p,{children:"Since the runtime in Mir is only responsible for coordinating the execution of protocol components and interaction between them, there are special components that provide functionality for sending and receiving messages over the network, as well as for setting local timers and for cryptographic operations. Mir explicitly distinguishes between passive components, which can only produce events synchronously, as a result of processing input events provided by the runtime, and active components, which can asynchronously produce new events on their own."}),"\n",(0,i.jsxs)(t.p,{children:["There are frameworks that provide means for enhancing protocol components with additional properties. Disel provides a protocol combinator\xa0",(0,i.jsx)(t.code,{children:"ProtocolWithIndInv"}),", which\xa0allows elaborating a protocol by strengthening it with additional inductive invariants. Verdi provides verified system transformers, which allow transforming protocols specified, implemented, and verified in an idealistic, reliable network semantics into an equivalent implementation, preserving the transformed system properties under a weaker fault model. PSync provides a class, which can be used to wrap protocol round instances to support updating progress conditions and synchronizing rounds in a Byzantine setting."]}),"\n",(0,i.jsx)(t.p,{children:"There are two main approaches to structure interaction of distributed protocols with the rest of the application. Some frameworks provide a mechanism for interacting with protocol components by sending and receiving messages, same as protocol components interact with each other. Other frameworks allow defining dedicated interfaces for that purpose, featuring callable methods or special IO events. In some of the frameworks, protocol components are supplied with some kind of handles to trigger side effects, such as sending messages or setting up timers; in other frameworks, side effects only happen after returning the control back to the runtime, e.g. through the return value or using a monadic structure."}),"\n",(0,i.jsx)(t.p,{children:"Protocol components commonly consist of the component's state and protocol logic structured as handlers modifying the state or state transition functions, which are triggered by the runtime upon certain events or conditions. In Distal and Disel, the handlers/transitions can be augmented with guarding conditions that must hold in order to trigger the action."}),"\n",(0,i.jsx)(t.p,{children:"The round-based model in PSync imposes a particular structure of protocol components. Protocol components in PSync must specify a sequence of protocol rounds. Each round, in general, consists of methods to: initialize the round, send messages at the beginning of the round, process received messages, and finally update the internal state before transitioning into the next round."}),"\n",(0,i.jsx)(t.p,{children:"PSync and Disel explicitly separate the protocol specification from its implementation, whereby the specification is used to formally verify the implementation. Protocol specifications in PSync consist of protocol properties, as well as safety and liveness predicates (assumptions). In order to aid automated verification in PSync, the specification should also include round and/or phase invariants; round transition relations are automatically derived from the code, although this imposes certain limitations on the code. In Disel, high-level abstract protocol specifications are defined in terms of state-space coherence predicates and send/receive transitions."}),"\n",(0,i.jsx)(t.p,{children:"The configuration of protocol components within nodes and their internal structure can be more static or dynamic. For example, in Babel, protocol components and various components' callbacks are registered within the runtime dynamically. The configuration of top-level components in Mir is rather static, for it cannot be changed after initialization, but there is a special component, called factory module, that supports creating sub-components dynamically. Such flexibility at runtime can make formal verification particularly hard, so the frameworks focused on formal verification (PSync, Disel, and Verdi) tend to be rather static with respect to the configuration and internal structure of protocol components."}),"\n",(0,i.jsx)(t.p,{children:"Overall, the abstract model adopted by a framework, e.g. the model of a generic state transition system with message-passing or the Heard-Of model based on communication-closed rounds, largely determines how protocol specifications and implementations are structured within the framework. The framework's features like formal verification can add further restrictions, e.g. restricting runtime flexibility of the configuration and internal structure of protocol components."}),"\n",(0,i.jsx)(t.h2,{id:"notation",children:"Notation"}),"\n",(0,i.jsx)(t.p,{children:"All of the explored frameworks use the general-purpose programming language they are based on as the primary means for expressing protocol implementations. To enhance ergonomics and expressiveness, most of the frameworks introduce some notational extensions, e.g. elements of an embedded domain-specific language (eDSL)."}),"\n",(0,i.jsx)(t.p,{children:"Using a regular general-purpose programming language as the basis allows tapping directly into the comprehensive features of the language, such as the type system, polymorphism, inheritance, and metaprogramming. On the other hand, implementing protocol components in regular code can produce some undesirable effects such as nondeterminism, e.g. when iterating over built-in unordered data structures, which is problematic for reproducible simulation-based testing. For that reason, Mir provides some utility functions that should be used in place of usual idiomatic code to avoid that kind of nondeterminism. Rich expressiveness of general-purpose languages can also make automatic verification difficult, e.g. PSync is quite limited in what kind of Scala constructs it supports in automatic derivation of transition relations from the code."}),"\n",(0,i.jsxs)(t.p,{children:["In most cases, the notational extensions introduced by the frameworks serve to make the code more declarative and concise. One target of such enhancements is providing a convenient and clear way of expressing the typical event-oriented pseudo-code notation with ",(0,i.jsx)(t.code,{children:"upon"})," statements. For example, the protocol logic in Distal is implemented by defining rules and the corresponding actions, whereby the rules are expressed in a declarative style resembling typical pseudo-code found in the literature and specify event predicates, such as the message type and matching conditions, as well as the means to specify composite events, which are triggered by collections of messages."]}),"\n",(0,i.jsx)(t.p,{children:"Another area of applying notational enhancements is for expressing certain actions performed by the protocol logic and overcoming the limitations of the host language. For example, Distal provides a special notation for sending messages, discarding received messages, as well as for scheduling actions to be executed in future. Disel extends Coq's specification language Gallina with effectful commands (actions), such as sending and receiving messages, reading from local state, monadic sequential composition, and general recursion. For message sending and receiving actions, Disel provides transition wrappers, which lift low-level operations on the networking layer to the level of well-typed program primitives corresponding to the protocol specification. Similarly, Verdi provides a monad for expressing the actions of sending messages, emitting output event, and manipulating the current state, as well as convenience notation for various monadic bindings."}),"\n",(0,i.jsx)(t.p,{children:"Finally, expressing protocol properties, assumptions, and invariants, as well as the related annotations in the protocol implementation can also benefit from notational enhancements. PSync, for instance, defines a DSL for expressing properties, predicates and invariants, in which one of the main primitives is the notion of domain, representing a set of values of certain type with universal and existential quantification defined for it, as well as set comprehension. Disel features a special notation for representing the higher-order Hoare types of program fragments."}),"\n",(0,i.jsx)(t.p,{children:"Many elements of a DSL can be implemented using common programming language techniques like polymorphism, inheritance, composition, higher-order functions, and the type system features. This way, Distal implements most of its DSL as ordinary methods and convenience aliases. However, this approach has certain limitations, and such techniques as metaprogramming (macros) or code generation are often required. For instance, in Distal, the key element of the DSL is implemented as a macro; in PSync, automatic derivation of transition relations from the code is also implemented as a macro. Code generation in Mir reduces the amount of hand-written boilerplate code by processing Protobuf definitions annotated with special extensions. Disel and Verdi take advantage of Coq's syntax extension features."}),"\n",(0,i.jsx)(t.p,{children:"Clear and convenient notation for defining protocol specifications and their implementation is crucial for ergonomics and expressiveness. Building upon ordinary code, clever use of common programming language techniques, such as polymorphism, inheritance, composition, higher-order functions, and the type system features, should be the preferred approach for achieving notational expressiveness. Such techniques as metaprogramming and code generation can greatly help overcoming the limitations of that approach or further improving the notation, but they can make the framework more complicated and, therefore, should be employed judiciously."}),"\n",(0,i.jsx)(t.h2,{id:"operation",children:"Operation"}),"\n",(0,i.jsx)(t.p,{children:"In terms of operation, the core part in most of the frameworks is some kind of runtime or engine that orchestrates the execution of protocol components and their interaction. For concurrent execution of protocol components, the runtimes mostly rely on conventional concurrency mechanisms used in the corresponding language's ecosystem, such as goroutines in Go and execution pools in Java and Scala. Atlas, notably, is based on native OS threads rather than an async Rust runtime like Tokio, presumably due to a performance overhead of the latter."}),"\n",(0,i.jsx)(t.p,{children:"There are two main approaches to implementing interaction based on message-passing between protocol components and with the networking layer: using a central event dispatching loop or through explicit channels established between components. Mir is a good example of the former approach, whereas Atlas follows the latter one. Since different protocol components normally operate asynchronously, there is often some kind of event queue or buffer placed between the components to accommodate for the asynchrony."}),"\n",(0,i.jsx)(t.p,{children:"This raises an issue of preventing unbounded growth of those queues. Mir addresses this problem by temporarily blocking the influx of external events from active modules when the amount of events buffered in internal queues exceeds certain thresholds. Atlas relies on flow control provided by bounded buffered channels for communication between components."}),"\n",(0,i.jsx)(t.p,{children:"In general, garbage collection issue is an important aspect of operation in distributed protocol implementations. Sometimes it can happen automatically, e.g. in PSync, received message sets are automatically discarded by the runtime upon transitioning into a new round. However, in some cases, it requires special care. For example, in Distal, protocol components should explicitly discard automatically buffered messages that become irrelevant for further execution of the protocol, in order to avoid unbounded growth of state and slowing down evaluation of rules. In Mir, there is an interesting pattern for performing garbage collection of internal component's state, whereby each disposable piece of state is assigned a numerical retention index, and the component removes the pieces of state whose retention index is below a specified value upon processing a dedicated garbage collection event emitted by another component."}),"\n",(0,i.jsx)(t.p,{children:"Communication between nodes in most of the frameworks is implemented in a simplistic manner, providing best-effort message delivery, following the fire-and-forget communication style. Babel is a notable exception, since it introduces a notion of communication channel abstraction, where different channel types can represent different communication mechanisms with different properties and guarantees, e.g. more reliable message delivery, multiplexing connections, and \u03c6-accrual failure detection."}),"\n",(0,i.jsx)(t.p,{children:"So orchestrating the execution and coordinating interaction of protocol components often require some kind of runtime provided by the framework. The runtime should take care of asynchrony, garbage collection, communication, and coordination within the node, preventing unbounded growth of internal state and ensuring good performance."}),"\n",(0,i.jsx)(t.h2,{id:"verification",children:"Verification"}),"\n",(0,i.jsx)(t.p,{children:"Not all of the explored frameworks are concerned with verifying correctness of protocols and their implementations. Verification is the primary area of focus for Disel and Verdi, as well as PSync. Verification is not a major concern in Mir, though it provides some mechanisms that can be considered as lightweight verification of protocol implementation correctness."}),"\n",(0,i.jsx)(t.p,{children:"Mir includes support for recording, inspecting, modifying, and replaying traces of events being passed by the node engine between the components, which can be very helpful for debugging, but also to perform correctness analysis. Mir also comes with a simple discrete-event simulation runtime that can be used for randomized reproducible testing with simulated time."}),"\n",(0,i.jsx)(t.p,{children:"Full-fledged formal verification of protocol specifications and implementation in Disel and Verdi relies on machine-assisted theorem proving, whereas PSync attempts to automate the process. Theorem proving, even if machine-assisted, is a very difficult, time consuming task and requires special expertise. Automated verification, on the other hand, is in general undecidable and can only be achieved with certain restrictions to the system model and the protocol implementation."}),"\n",(0,i.jsx)(t.p,{children:"Formal verification requires formal specification of the assumptions and the required properties. In Disel, protocol specifications are defined in terms of state-space coherence predicates and send/receive transitions. In Verdi, the correct behavior of the protocol is specified as a logical predicate over its possible traces of events. Formal specifications in PSync are expressed in terms of protocol properties, expressed in a fragment of a first-order temporal logic, as well as safety and liveness predicates (assumptions), expressed in terms of cardinalities of heard-of sets."}),"\n",(0,i.jsx)(t.p,{children:"In these frameworks, the method of formally proving the correctness is typically by induction, constructing inductive state invariants. Coming up with appropriate inductive invariants constitutes the greatest difficulty in the verification effort and requires special skills."}),"\n",(0,i.jsx)(t.p,{children:"In PSync, the simple round-based structure with lock-step semantics makes protocol implementation amenable to automated verification that can check safety and liveness properties. The verification, though, requires inductive invariants at the boundaries between rounds. However, the automated verification problem is decidable with certain constraints."}),"\n",(0,i.jsxs)(t.p,{children:["The correctness of protocol implementation in Verdi is proved directly, whereas Disel employs a different approach. For implementing protocol specification, Disel provides a DSL, embedded shallowly into Coq, that extends Coq's specification language Gallina. Disel programs and their fragments are assigned types corresponding to the protocol specification in higher-order separation-style Hoare logic. For message sending and receiving actions, Disel provides transition wrappers, which lift low-level operations on the networking layer to the level of well-typed program primitives corresponding to the protocol specification. Well-typed programs are guaranteed to be ",(0,i.jsx)(t.em,{children:"correct by construction"})," w.r.t. the protocol specifications."]}),"\n",(0,i.jsxs)(t.p,{children:["In Verdi, once the protocol is specified, implemented, and verified in an idealistic reliable network semantics, it can be translated using ",(0,i.jsx)(t.em,{children:"verified system transformers"})," into an equivalent implementation, preserving the transformed system properties under a weaker fault model."]}),"\n",(0,i.jsx)(t.p,{children:"in Disel, protocol specifications can be generic and parameterized. The generic protocol specifications with their proven invariants can be used in composition. Disel provides mechanisms to establish stronger properties of generic protocols and their combinations by elaborating the protocol, i.e. strengthening it with additional inductive invariants."}),"\n",(0,i.jsx)(t.p,{children:"Correctness is very important for the critical fault-tolerant protocols; therefore, the verification aspect deserves special attention. There are relatively easy-to-apply lightweight methods, such as randomized reproducible testing with discrete-event simulation, and there are sophisticated formal methods typically requiring special skills and expertise, such as machine-assisted theorem proving. However, some particularly structured system models may enable automated reasoning and make formal verification more practical, though at the cost of additional limitations."}),"\n",(0,i.jsx)(t.h2,{id:"conclusions",children:"Conclusions"}),"\n",(0,i.jsx)(t.p,{children:"Having explored these 7 frameworks for implementing distributed protocols, I found most of them not sufficiently developed for practical use, though some of the ideas and techniques employed there were worth exploring. Being purely academic efforts, most of the frameworks seem to have been abandoned after exploring some ideas and publishing the results. As of time of this writing, Mir is perhaps the most mature, well documented, and up-to-date one among these frameworks."}),"\n",(0,i.jsxs)(t.p,{children:["Focusing on some particular aspects of implementing distributed protocols, such as unifying and standardizing components, testing and debugging, notational convenience, or formal verification, while mostly neglecting the remaining aspects, may be appropriate for academic research, but this is certainly not sufficient for achieving practical adoption. Moreover, the programming languages that most of the frameworks are based on would make it hard to integrate the protocol implementations directly into larger code bases written in other languages, let alone that having to learn a less commonly used language like Scala or Coq is an additional obstacle for adoption. Please refer to the ",(0,i.jsx)(t.a,{href:"https://replica-io.dev/blog/2024/03/04/on-implementation-of-distributed-prtocols",children:"previous post"})," about practical aspects of implementing distributed protocols."]}),"\n",(0,i.jsxs)(t.p,{children:["Most important, perhaps, is that all of the frameworks seem to basically adopt the same model of a state transition system and trying to mimic the event-oriented notation as found in typical pseudo-code with ",(0,i.jsx)(t.code,{children:"upon"})," statements in the literature on distributed protocols. This largely impacts how protocol implementations are expressed and structured in those frameworks."]}),"\n",(0,i.jsxs)(t.p,{children:["I believe, if we want to make a real breakthrough in ",(0,i.jsx)(t.em,{children:"both designing and implementing"})," distributed protocols, which is what the Replica_IO project is about, then we should first of all be innovative, challenging the status quo, and think holistically, taking into account all relevant aspects. Trying to rethink the conventional distributed system model and the way of expressing distributed protocols would be a good start."]}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(t.p,{children:["Having explored some distributed protocol implementations and frameworks for implementing distributed protocols, now it is a good time to clearly state the problems in designing and implementing distributed protocols to focus on for the rest of milestone ",(0,i.jsx)(t.a,{href:"https://github.com/replica-io/replica-io/milestone/1",children:"M0.1"})," and start gathering ideas on how we could approach them. Apart from that, there are still some potentially related concepts, approaches, and techniques worth looking into as part of the initial state-of-the-art exploration. The exploration tasks are tracked in the scope of ",(0,i.jsx)(t.a,{href:"https://github.com/replica-io/replica-io/issues/7",children:"this issue"})," on GitHub."]}),"\n",(0,i.jsxs)(t.p,{children:["Once the initial exploratory stage is over, it will be time to come up with key ideas concerning core principles that will guide the process of designing and implementing generic components within the framework (milestone ",(0,i.jsx)(t.a,{href:"https://github.com/replica-io/replica-io/milestone/1",children:"M0.1"}),"). Then those ideas will be developed into clearly formulated concepts (milestone\xa0",(0,i.jsx)(t.a,{href:"https://github.com/replica-io/replica-io/milestone/2",children:"M0.2"}),"), their feasibility will be verified with code (milestone\xa0",(0,i.jsx)(t.a,{href:"https://github.com/replica-io/replica-io/milestone/3",children:"M0.3"}),"). After that, prototype, MVP, and production versions of the framework will be developed and released (milestones\xa0",(0,i.jsx)(t.a,{href:"https://github.com/replica-io/replica-io/milestone/4",children:"M1"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/replica-io/replica-io/milestone/5",children:"M2"}),", and ",(0,i.jsx)(t.a,{href:"https://github.com/replica-io/replica-io/milestone/6",children:"M3"}),")."]}),"\n",(0,i.jsx)(t.p,{children:"It does not mean at all that exploration, ideation, and prototyping will not take place at later stages; the milestones simply define the framework's general level of maturity. The framework will continuously evolve and expand and at some point become a de facto standard for implementing critical fault-tolerant systems providing a growing collection of easy-to-use reliable and efficient distributed replication mechanisms."}),"\n","\n",(0,i.jsx)(s.A,{type:"info",icon:"\u2764\ufe0f",title:"Supporting",children:(0,i.jsxs)(t.p,{children:["If you like the project and find it valuable, please ",(0,i.jsx)("a",{href:"https://github.com/sponsors/replica-io",children:"support"})," its further development! \ud83d\ude4f"]})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["If you have any thought you would like to share or any question regarding this post, please add a comment ",(0,i.jsx)(t.a,{href:"https://github.com/orgs/replica-io/discussions/43",children:"here"}),". You are also welcome to ",(0,i.jsx)(t.a,{href:"https://github.com/orgs/replica-io/discussions/new",children:"start a new discussion"})," or chime in to ",(0,i.jsx)(t.a,{href:"https://discord.replica-io.dev/",children:"our Discord"})," server."]})}),"\n","\n",(0,i.jsxs)(t.section,{"data-footnotes":!0,className:"footnotes",children:[(0,i.jsx)(t.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{id:"user-content-fn-other-frameworks-ef0b52",children:["\n",(0,i.jsxs)(t.p,{children:["If you know of some other framework for implementing distributed protocols that I should have looked into, please let me know. ",(0,i.jsx)(t.a,{href:"#user-content-fnref-other-frameworks-ef0b52","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},7293:(e,t,o)=>{o.d(t,{A:()=>q});var i=o(6540),n=o(4848);function s(e){const{mdxAdmonitionTitle:t,rest:o}=function(e){const t=i.Children.toArray(e),o=t.find((e=>i.isValidElement(e)&&"mdxAdmonitionTitle"===e.type)),s=t.filter((e=>e!==o)),r=o?.props.children;return{mdxAdmonitionTitle:r,rest:s.length>0?(0,n.jsx)(n.Fragment,{children:s}):null}}(e.children),s=e.title??t;return{...e,...s&&{title:s},children:o}}var r=o(4164),a=o(1312),l=o(7559);const c={admonition:"admonition_xJq3",admonitionHeading:"admonitionHeading_Gvgb",admonitionIcon:"admonitionIcon_Rf37",admonitionContent:"admonitionContent_BuS1"};function d(e){let{type:t,className:o,children:i}=e;return(0,n.jsx)("div",{className:(0,r.A)(l.G.common.admonition,l.G.common.admonitionType(t),c.admonition,o),children:i})}function h(e){let{icon:t,title:o}=e;return(0,n.jsxs)("div",{className:c.admonitionHeading,children:[(0,n.jsx)("span",{className:c.admonitionIcon,children:t}),o]})}function m(e){let{children:t}=e;return t?(0,n.jsx)("div",{className:c.admonitionContent,children:t}):null}function p(e){const{type:t,icon:o,title:i,children:s,className:r}=e;return(0,n.jsxs)(d,{type:t,className:r,children:[i||o?(0,n.jsx)(h,{title:i,icon:o}):null,(0,n.jsx)(m,{children:s})]})}function u(e){return(0,n.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,n.jsx)("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})})}const f={icon:(0,n.jsx)(u,{}),title:(0,n.jsx)(a.A,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)",children:"note"})};function g(e){return(0,n.jsx)(p,{...f,...e,className:(0,r.A)("alert alert--secondary",e.className),children:e.children})}function w(e){return(0,n.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,n.jsx)("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})})}const b={icon:(0,n.jsx)(w,{}),title:(0,n.jsx)(a.A,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)",children:"tip"})};function v(e){return(0,n.jsx)(p,{...b,...e,className:(0,r.A)("alert alert--success",e.className),children:e.children})}function y(e){return(0,n.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,n.jsx)("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})})}const x={icon:(0,n.jsx)(y,{}),title:(0,n.jsx)(a.A,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)",children:"info"})};function k(e){return(0,n.jsx)(p,{...x,...e,className:(0,r.A)("alert alert--info",e.className),children:e.children})}function j(e){return(0,n.jsx)("svg",{viewBox:"0 0 16 16",...e,children:(0,n.jsx)("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})})}const I={icon:(0,n.jsx)(j,{}),title:(0,n.jsx)(a.A,{id:"theme.admonition.warning",description:"The default label used for the Warning admonition (:::warning)",children:"warning"})};function T(e){return(0,n.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,n.jsx)("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})})}const S={icon:(0,n.jsx)(T,{}),title:(0,n.jsx)(a.A,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)",children:"danger"})};const D={icon:(0,n.jsx)(j,{}),title:(0,n.jsx)(a.A,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)",children:"caution"})};const M={...{note:g,tip:v,info:k,warning:function(e){return(0,n.jsx)(p,{...I,...e,className:(0,r.A)("alert alert--warning",e.className),children:e.children})},danger:function(e){return(0,n.jsx)(p,{...S,...e,className:(0,r.A)("alert alert--danger",e.className),children:e.children})}},...{secondary:e=>(0,n.jsx)(g,{title:"secondary",...e}),important:e=>(0,n.jsx)(k,{title:"important",...e}),success:e=>(0,n.jsx)(v,{title:"success",...e}),caution:function(e){return(0,n.jsx)(p,{...D,...e,className:(0,r.A)("alert alert--warning",e.className),children:e.children})}}};function q(e){const t=s(e),o=(i=t.type,M[i]||(console.warn(`No admonition component found for admonition type "${i}". Using Info as fallback.`),M.info));var i;return(0,n.jsx)(o,{...t})}},3767:(e,t,o)=>{o.d(t,{A:()=>i});const i=o.p+"assets/images/image-dbb91b3b9e07e1bbcc2658388803c5a9.png"},8453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>a});var i=o(6540);const n={},s=i.createContext(n);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);